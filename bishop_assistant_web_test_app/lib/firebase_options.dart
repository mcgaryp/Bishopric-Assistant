// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DevFirebaseOptions {
  static late Environment _env;
  static Future<FirebaseOptions> get currentPlatform async {
    _env = await Environment.instance;
    if (kIsWeb) {
      return _web;
    }
    // ignore: missing_enum_constant_in_switch
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return _android;
      case TargetPlatform.iOS:
        return _ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
    }

    throw UnsupportedError(
      'DefaultFirebaseOptions are not supported for this platform.',
    );
  }

  static FirebaseOptions _web = FirebaseOptions(
    apiKey: _env.webApiKey,
    appId: _env.webAppID,
    messagingSenderId: _env.webMessagingSenderID,
    projectId: _env.webProjectID,
    authDomain: _env.webAuthDomain,
    storageBucket: _env.webStorageBucket,
    measurementId: _env.webMeasurementID,
  );

  static FirebaseOptions _android = FirebaseOptions(
    apiKey: _env.androidApiKey,
    appId: _env.androidAppID,
    messagingSenderId: _env.androidMessagingSenderID,
    projectId: _env.androidProjectID,
    storageBucket: _env.androidStorageBucket,
  );

  static FirebaseOptions _ios = FirebaseOptions(
    apiKey: _env.iosApiKey,
    appId: _env.iosAppID,
    messagingSenderId: _env.iosMessagingSenderID,
    projectId: _env.iosProjectID,
    storageBucket: _env.iosStorageBucket,
    iosClientId: _env.iosClientID,
    iosBundleId: _env.iosBundleID,
  );
}

class Environment {
  // Singleton pattern
  static final Environment _env = new Environment._internal();

  Environment._internal();

  static Future<Environment> get instance async {
    await dotenv.load(fileName: "env");
    return _env;
  }

  String get webApiKey => _EnvKey.WEB_API_KEY.getKey;

  String get webAppID => _EnvKey.WEB_APP_ID.getKey;

  String get webMessagingSenderID => _EnvKey.WEB_MESSAGING_SENDER_ID.getKey;

  String get webProjectID => _EnvKey.WEB_PROJECT_ID.getKey;

  String get webAuthDomain => _EnvKey.WEB_AUTH_DOMAIN.getKey;

  String get webStorageBucket => _EnvKey.WEB_STORAGE_BUCKET.getKey;

  String get webMeasurementID => _EnvKey.WEB_MEASUREMENT_ID.getKey;

  String get androidApiKey => _EnvKey.ANDROID_API_KEY.getKey;

  String get androidAppID => _EnvKey.ANDROID_APP_ID.getKey;

  String get androidMessagingSenderID =>
      _EnvKey.ANDROID_MESSAGING_SENDER_ID.getKey;

  String get androidProjectID => _EnvKey.ANDROID_PROJECT_ID.getKey;

  String get androidStorageBucket => _EnvKey.ANDROID_STORAGE_BUCKET.getKey;

  String get iosApiKey => _EnvKey.IOS_API_KEY.getKey;

  String get iosAppID => _EnvKey.IOS_APP_ID.getKey;

  String get iosMessagingSenderID => _EnvKey.IOS_MESSAGING_SENDER_ID.getKey;

  String get iosProjectID => _EnvKey.IOS_PROJECT_ID.getKey;

  String get iosBundleID => _EnvKey.IOS_BUNDLE_ID.getKey;

  String get iosStorageBucket => _EnvKey.IOS_STORAGE_BUCKET.getKey;

  String get iosClientID => _EnvKey.IOS_CLIENT_ID.getKey;
}

enum _EnvKey {
  WEB_API_KEY,
  WEB_APP_ID,
  WEB_MESSAGING_SENDER_ID,
  WEB_PROJECT_ID,
  WEB_AUTH_DOMAIN,
  WEB_STORAGE_BUCKET,
  WEB_MEASUREMENT_ID,
  ANDROID_API_KEY,
  ANDROID_APP_ID,
  ANDROID_MESSAGING_SENDER_ID,
  ANDROID_PROJECT_ID,
  ANDROID_STORAGE_BUCKET,
  IOS_API_KEY,
  IOS_APP_ID,
  IOS_MESSAGING_SENDER_ID,
  IOS_PROJECT_ID,
  IOS_STORAGE_BUCKET,
  IOS_CLIENT_ID,
  IOS_BUNDLE_ID,
}

extension _EnvKeyExtension on _EnvKey {
  String get getKey {
    String? str = dotenv.env[this.name];
    if (str != null) return str;
    throw ErrorDescription("ENV KEY: ${this.name} is not found");
  }
}
